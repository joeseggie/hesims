@page "/scholarships/{id:guid}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Scholarship Details</PageTitle>

<h3>Scholarship Details</h3>

<div class="btn-group">
    <NavLink href="/" class="btn btn-primary btn-sm" aria-current="page">Scholarships List</NavLink>
</div><br /><br />

@if (Scholarship != null)
{
    <div class="card bg-light">
        <div class="card-body">
            <form>
                <input type="hidden" @bind="Scholarship.ScholarshipId" />
                <div class="form-group mb-3">
                    <label>Scholarship Program</label>
                    <input @bind="Scholarship.ScholarshipName" class="form-control" placeholder="Scholarship program">
                </div>
                <div class="form-group mb-3">
                    <label>Offering Country</label>
                    <select @bind="Scholarship.CountryId" class="form-select">
                        <option selected>Select a country</option>
                        @if (Countries != null)
                        {
                            @foreach (var country in Countries)
                            {
                                <option value="@country.CountryId">@country.CountryName</option>
                            }
                        }
                    </select>
                </div>
                <button @onclick="Submit" class="btn btn-danger btn-sm" type="submit">Save Changes</button>
            </form>
        </div>
    </div>
}

<br /><br />

@code {

    [Parameter] public Guid Id { get; set; }

    private ScholarshipViewModel? Scholarship { get; set; } = new ScholarshipViewModel();
    private List<CountryViewModel>? Countries { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Scholarship = await Http.GetFromJsonAsync<ScholarshipViewModel>($"{NavigationManager.BaseUri}api/scholarships/{Id}");
        Countries = await Http.GetFromJsonAsync<List<CountryViewModel>>($"{NavigationManager.BaseUri}api/countries");
    }

    private async Task Submit()
    {
        if (Scholarship != null)
        {
            await Http.PutAsJsonAsync<ScholarshipViewModel>($"{NavigationManager.BaseUri}api/scholarships/{Id}", Scholarship);
            NavigationManager.NavigateTo($"{NavigationManager.BaseUri}scholarships/{Id}");
        }
    }

}