@page "/students/{StudentId:guid}/courses/add"

@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Register Student Course</h3>
<hr class="mb-3" />

<NavLink href="@($"students/{StudentId}")" class="btn btn-primary btn-sm">Back</NavLink><br /><br />

<div class="card bg-light">
    <div class="card-body">
        <form>
            <input type="hidden" @bind="studentCourse.StudentId" />
            <div class="form-group pb-3">
                <label>Country</label>
                @if (countries is not null)
                {
                    <select class="form-select" @onchange="LoadScholarshipsList">
                        <option value="">Select country</option>
                        @foreach (var country in countries)
                        {
                            <option value="@country.CountryId">@country.CountryName</option>
                        }
                    </select>
                }
                else
                {
                    <select class="form-select">
                        <option value="">Select country</option>
                    </select>
                }
            </div>
            <div class="form-group pb-3">
                <label>Scholarship</label>
                @if (scholarships is not null)
                {
                    <select class="form-select" disabled="@isDisabledScholarshipsList" @onchange="LoadInstitutionsList">
                        <option value="">Select scholarship</option>
                        @foreach (var scholarship in scholarships)
                        {
                            <option value="@scholarship.ScholarshipId">@scholarship.ScholarshipName</option>
                        }
                    </select>
                }
                else
                {
                    <select class="form-select" disabled>
                        <option value="">Select scholarship</option>
                    </select>
                }
            </div>
            <div class="form-group pb-3">
                <label>Institution</label>
                @if (institutions is not null)
                {
                    <select class="form-select" disabled="@isDisabledInstitutionsList" @onchange="LoadCoursesList">
                        <option value="">Select institution</option>
                        @foreach (var institution in institutions)
                        {
                            <option value="@institution.InstitutionId">@institution.InstitutionName</option>
                        }
                    </select>
                }
                else
                {
                    <select class="form-select" disabled>
                        <option value="">Select institution</option>
                    </select>
                }
            </div>
            <div class="form-group pb-3">
                <label>Course</label>
                @if (courses is not null)
                {
                    <select class="form-select" @bind="studentCourse.CourseId" disabled="@isDisabledCoursesList">
                        <option value="">Select course</option>
                        @foreach (var course in courses)
                        {
                            <option value="@course.CourseId">@course.CourseName</option>
                        }
                    </select>
                }
                else
                {
                    <select class="form-select">
                        <option value="">Select course</option>
                    </select>
                }
            </div>
            <div class="form-group pb-3">
                <label>Entry Year</label>
                <input class="form-control" placeholder="Entry year" @bind="studentCourse.EntryYear">
            </div>
            <div class="form-group pb-3">
                <label>Institution Registration Number</label>
                <input class="form-control" placeholder="Registration number issued on admission"
                @bind="studentCourse.CourseRegistrationNumber">
            </div>
            <button class="btn btn-danger btn-sm" type="submit" @onclick="RegisterStudentCourse">Register Course</button>
        </form>
    </div>
</div>

@code {
    [Parameter] public Guid StudentId { get; set; }
    [Parameter] public StudentCourseViewModel studentCourse { get; set; } = new();
    [Parameter] public Guid CountryId { get; set; }
    [Parameter] public Guid ScholarshipId { get; set; }
    [Parameter] public Guid InstitutionId { get; set; }

    private List<CountryViewModel>? countries = new();
    private List<ScholarshipViewModel>? scholarships = new();
    private List<InstitutionViewModel>? institutions = new();
    private List<CourseViewModel>? courses = new();

    private bool isDisabledScholarshipsList = true;
    private bool isDisabledInstitutionsList = true;
    private bool isDisabledCoursesList = true;

    protected override async Task OnInitializedAsync()
    {
        studentCourse.StudentId = StudentId;

        countries = await Http.GetFromJsonAsync<List<CountryViewModel>>($"{NavigationManager.BaseUri}api/countries");
    }

    private async Task LoadScholarshipsList(ChangeEventArgs e)
    {
        if (e.Value is string selectedCountryId)
        {
            if (Guid.TryParse(selectedCountryId, out Guid countryId))
            {
                CountryId = countryId;

                scholarships = await Http.GetFromJsonAsync<List<ScholarshipViewModel>>($"{NavigationManager.BaseUri}api/scholarships?countryId={countryId}");
                isDisabledScholarshipsList = false;
            }
        }
        else
        {
            isDisabledScholarshipsList = true;
            isDisabledInstitutionsList = true;

            scholarships = null;
            institutions = null;
            courses = null;
        }
    }

    private async Task LoadInstitutionsList(ChangeEventArgs e)
    {
        if (!(e.Value is string selectedScholarshipId))
        {
            isDisabledCoursesList = true;
            courses = null;

            return;
        }

        if (!Guid.TryParse(selectedScholarshipId, out Guid scholarshipId))
        {
            isDisabledCoursesList = true;
            courses = null;

            return;
        }

        ScholarshipId = scholarshipId;
        institutions = await Http.GetFromJsonAsync<List<InstitutionViewModel>>($"{NavigationManager.BaseUri}api/institutions?countryId={CountryId}");
        isDisabledInstitutionsList = false;
    }

    private async Task LoadCoursesList(ChangeEventArgs e)
    {
        if (!(e.Value is string selectedInstitutionId) || !Guid.TryParse(selectedInstitutionId, out Guid institutionId))
        {
            isDisabledCoursesList = true;
            courses = null;
            return;
        }

        InstitutionId = institutionId;
        courses = await Http.GetFromJsonAsync<List<CourseViewModel>>($"{NavigationManager.BaseUri}api/courses?institutionId={institutionId}");
        isDisabledCoursesList = false;
    }

    private async Task RegisterStudentCourse()
    {
        if (studentCourse is null)
        {
            return;
        }

        studentCourse.ScholarshipId = ScholarshipId;

        var response = await Http.PostAsJsonAsync<StudentCourseViewModel>($"{NavigationManager.BaseUri}api/studentcourses", studentCourse);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"{NavigationManager.BaseUri}students/{StudentId}", true);
        }
    }
}