@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Courses in Application Cycle</h3>
<hr />

<NavLink href="@($"application-cycle-courses/new?cycle={ApplicationCycleId}&scholarship={ScholarshipId}")" class="btn btn-primary btn-sm">Add Course</NavLink><br />

@if (applicationCycleCourses != null)
{
    <table class="table table-striped table-responsive table-sm">
        <thead>
            <tr>
                <th class="col-4">Course</th>
                <th class="col-3">Institution</th>
                <th class="col-1">Duration</th>
                <th class="col-2">Level</th>
                <th class="col-1"></th>
                <th class="col-1"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var applicationCycleCourse in applicationCycleCourses)
            {
                <tr>
                    <td class="col-4 fs-6">@applicationCycleCourse.Course?.CourseName</td>
                    <td class="col-3 fs-6">@applicationCycleCourse.Course?.Institution</td>
                    <td class="col-1 fs-6">@applicationCycleCourse.Course?.Duration</td>
                    <td class="col-2 fs-6">@applicationCycleCourse.Course?.CourseLevel</td>
                    <td class="col-1">
                        <NavLink href="@($"students/apply/{applicationCycleCourse.ApplicationCycleCourseId}")" class="btn btn-primary btn-sm">Apply</NavLink>
                    </td>
                    <td class="col-1">
                        <button @onclick="@(e => Delete(applicationCycleCourse.ApplicationCycleCourseId ?? Guid.Empty))" class="btn btn-danger btn-sm">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string endpoint = "api/application-cycle-courses";
    private List<ApplicationCycleCourseViewModel>? applicationCycleCourses = new();

    [Parameter] public Guid? ApplicationCycleId { get; set; }
    [Parameter] public Guid? ScholarshipId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        applicationCycleCourses = await
        Http.GetFromJsonAsync<List<ApplicationCycleCourseViewModel>>($"{NavigationManager.BaseUri}{endpoint}?cycle={ApplicationCycleId}");
    }

    private async Task Delete(Guid applicationCycleCourseId)
    {
        var result = await Http.DeleteAsync($"{NavigationManager.BaseUri}{endpoint}/{applicationCycleCourseId}");
        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/application-cycles/{ApplicationCycleId}?scholarship={ScholarshipId}", true);
        }
    }
}